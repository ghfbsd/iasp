      subroutine emdlv(r,vp,vs)
c         set up information on earth model (specified by
c         subroutine call emiasp)
c         set dimension of cpr,rd  equal to number of radial
c         discontinuities in model
      parameter (re=6371.0)
      call vek137(re-r,vp,vs,rho)
      end

      subroutine emdld(dmax,n,cpr,name)
      parameter (re=6371.0,nd=9,eqdmax=800.)
      dimension cpr(nd),rd(nd)
      character*(*) name
      character*20 modnam
      logical first
      data rd/0.,20.,35.,210.,410.,660.,2740.,2891.5,5153.5/
      data modnam/'ek137'/, first/.true./
      if (first) then
	 first = .false.
	 do 10 i=1,nd
	    rd(i) = re-rd(i)
10       continue
      endif
      n=nd
      do 1 i=1,nd
 1    cpr(i)=rd(nd-i+1)
      name=modnam
      dmax=eqdmax
      return
      end

      subroutine vek137(pz,pp,ps,prho)
      parameter (nz=138)
      real z(nz),rho(nz),vp(nz),vs(nz)
      real interp

      data (z(i),rho(i),vp(i),vs(i),i=1,10) /
     +    0.000,  2.6510,  5.8000,  3.4200,
     +   20.000,  2.6510,  5.8000,  3.4200,
     +   20.000,  2.8630,  6.5000,  3.8100,
     +   35.000,  2.8630,  6.5000,  3.8100,
     +   35.000,  3.2900,  8.0400,  4.4800,
     +   77.500,  3.2940,  8.0450,  4.4900,
     +  120.000,  3.2960,  8.0500,  4.5000,
     +  165.000,  3.3425,  8.1750,  4.5090,
     +  210.000,  3.3889,  8.3000,  4.5180,
     +  210.000,  3.3889,  8.3000,  4.5230/

      data (z(i),rho(i),vp(i),vs(i),i=11,20) /
     +  260.000,  3.4512,  8.4825,  4.6090,
     +  310.000,  3.5203,  8.6640,  4.6960,
     +  360.000,  3.5894,  8.8445,  4.7880,
     +  410.000,  3.6586,  9.0200,  4.8600,
     +  410.000,  3.7836,  9.3800,  5.0900,
     +  460.000,  3.8482,  9.5320,  5.1910,
     +  510.000,  3.9108,  9.6960,  5.2920,
     +  560.000,  3.9735,  9.8640,  5.3980,
     +  610.000,  4.0371, 10.0320,  5.5040,
     +  660.000,  4.1008, 10.2000,  5.6100/

      data (z(i),rho(i),vp(i),vs(i),i=21,30) /
     +  660.000,  4.3253, 10.7900,  6.0100,
     +  710.000,  4.3756, 10.9229,  6.1097,
     +  760.000,  4.4259, 11.0558,  6.2095,
     +  809.500,  4.4561, 11.1353,  6.2426,
     +  859.000,  4.4899, 11.2221,  6.2798,
     +  908.500,  4.5220, 11.3068,  6.3160,
     +  958.000,  4.5654, 11.3896,  6.3512,
     + 1007.500,  4.5926, 11.4705,  6.3854,
     + 1057.000,  4.6198, 11.5499,  6.4187,
     + 1106.500,  4.6467, 11.6277,  6.4510/

      data (z(i),rho(i),vp(i),vs(i),i=31,40) /
     + 1156.000,  4.6736, 11.7038,  6.4828,
     + 1205.500,  4.7001, 11.7782,  6.5138,
     + 1255.000,  4.7266, 11.8511,  6.5439,
     + 1304.500,  4.7528, 11.9224,  6.5727,
     + 1354.000,  4.7790, 11.9923,  6.6008,
     + 1403.500,  4.8050, 12.0609,  6.6285,
     + 1453.000,  4.8307, 12.1281,  6.6555,
     + 1502.500,  4.8562, 12.1952,  6.6815,
     + 1552.000,  4.8817, 12.2586,  6.7073,
     + 1601.500,  4.9069, 12.3217,  6.7326/

      data (z(i),rho(i),vp(i),vs(i),i=41,50) /
     + 1651.000,  4.9321, 12.3847,  6.7573,
     + 1700.500,  4.9570, 12.4450,  6.7815,
     + 1750.000,  4.9817, 12.5051,  6.8052,
     + 1799.500,  5.0062, 12.5647,  6.8286,
     + 1849.000,  5.0306, 12.6233,  6.8515,
     + 1898.500,  5.0548, 12.6812,  6.8742,
     + 1948.000,  5.0789, 12.7386,  6.8972,
     + 1997.500,  5.1027, 12.7956,  6.9194,
     + 2047.000,  5.1264, 12.8526,  6.9418,
     + 2096.500,  5.1499, 12.9086,  6.9627/

      data (z(i),rho(i),vp(i),vs(i),i=51,60) /
     + 2146.000,  5.1732, 12.9648,  6.9855,
     + 2195.500,  5.1963, 13.0192,  7.0063,
     + 2245.000,  5.2192, 13.0743,  7.0281,
     + 2294.500,  5.2420, 13.1286,  7.0490,
     + 2344.000,  5.2647, 13.1834,  7.0700,
     + 2393.500,  5.2870, 13.2395,  7.0901,
     + 2443.000,  5.3092, 13.2928,  7.1104,
     + 2492.500,  5.3313, 13.34851, 7.1319,
     + 2542.000,  5.3532, 13.4056,  7.1526,
     + 2591.500,  5.3748, 13.4641,  7.1737/

      data (z(i),rho(i),vp(i),vs(i),i=61,70) /
     + 2640.000,  5.4012, 13.5212,  7.1951,
     + 2690.000,  5.4276, 13.5800,  7.2168,
     + 2740.000,  5.4537, 13.6394,  7.2390,
     + 2740.000,  5.6114, 13.6394,  7.2390,
     + 2789.670,  5.6476, 13.6410,  7.2497,
     + 2839.330,  5.6828, 13.6426,  7.2594,
     + 2891.500,  5.7591, 13.64421, 7.2711,
     + 2891.500,  9.9145,  8.0090,  0.0000,
     + 2939.330,  9.9942,  8.0941,  0.0000,
     + 2989.660, 10.0722,  8.1816,  0.0000/

      data (z(i),rho(i),vp(i),vs(i),i=71,80) /
     + 3039.990, 10.1485,  8.2666,  0.0000,
     + 3090.320, 10.2233,  8.3496,  0.0000,
     + 3140.660, 10.2964,  8.4305,  0.0000,
     + 3190.990, 10.3679,  8.5084,  0.0000,
     + 3241.320, 10.4378,  8.5848,  0.0000,
     + 3291.650, 10.5062,  8.6591,  0.0000,
     + 3341.980, 10.5731,  8.7320,  0.0000,
     + 3392.310, 10.6385,  8.8024,  0.0000,
     + 3442.640, 10.7023,  8.8714,  0.0000,
     + 3492.970, 10.7647,  8.9382,  0.0000/

      data (z(i),rho(i),vp(i),vs(i),i=81,90) /
     + 3543.300, 10.8257,  9.0034,  0.0000,
     + 3593.640, 10.8852,  9.0664,  0.0000,
     + 3643.970, 10.9434,  9.1286,  0.0000,
     + 3694.300, 11.0001,  9.1889,  0.0000,
     + 3744.630, 11.0555,  9.2470,  0.0000,
     + 3794.960, 11.1095,  9.3047,  0.0000,
     + 3845.290, 11.1623,  9.3604,  0.0000,
     + 3895.620, 11.2137,  9.4145,  0.0000,
     + 3945.950, 11.2639,  9.4669,  0.0000,
     + 3996.280, 11.3127,  9.5180,  0.0000/

      data (z(i),rho(i),vp(i),vs(i),i=91,100) /
     + 4046.620, 11.3604,  9.5677,  0.0000,
     + 4096.950, 11.4069,  9.6159,  0.0000,
     + 4147.280, 11.4521,  9.6623,  0.0000,
     + 4197.610, 11.4962,  9.7080,  0.0000,
     + 4247.940, 11.5391,  9.7513,  0.0000,
     + 4298.270, 11.5809,  9.7914,  0.0000,
     + 4348.600, 11.6216,  9.8304,  0.0000,
     + 4398.930, 11.6612,  9.8682,  0.0000,
     + 4449.260, 11.6998,  9.9051,  0.0000,
     + 4499.600, 11.7373,  9.9410,  0.0000/

      data (z(i),rho(i),vp(i),vs(i),i=101,110) /
     + 4549.930, 11.7737,  9.9761,  0.0000,
     + 4600.260, 11.8092, 10.0103,  0.0000,
     + 4650.590, 11.8437, 10.0439,  0.0000,
     + 4700.920, 11.8772, 10.0768,  0.0000,
     + 4751.250, 11.9098, 10.1092,  0.0000,
     + 4801.580, 11.9414, 10.1415,  0.0000,
     + 4851.910, 11.9722, 10.1739,  0.0000,
     + 4902.240, 12.0001, 10.2049,  0.0000,
     + 4952.580, 12.0311, 10.2329,  0.0000,
     + 5002.910, 12.0593, 10.2565,  0.0000/

      data (z(i),rho(i),vp(i),vs(i),i=111,120) /
     + 5053.240, 12.0867, 10.2745,  0.0000,
     + 5103.570, 12.1133, 10.2854,  0.0000,
     + 5153.500, 12.1391, 10.2890,  0.0000,
     + 5153.500, 12.7037, 11.0427,  3.4243,
     + 5204.610, 12.7289, 11.0585,  3.4387,
     + 5255.320, 12.7530, 11.0718,  3.4514,
     + 5306.040, 12.7760, 11.0850,  3.4635,
     + 5356.750, 12.7980, 11.0983,  3.4751,
     + 5407.460, 12.8188, 11.1166,  3.4861,
     + 5458.170, 12.8387, 11.1316,  3.4965/

      data (z(i),rho(i),vp(i),vs(i),i=121,130) /
     + 5508.890, 12.8574, 11.1457,  3.5064,
     + 5559.600, 12.8751, 11.1590,  3.5157,
     + 5610.310, 12.8917, 11.1715,  3.5244,
     + 5661.020, 12.9072, 11.1832,  3.5326,
     + 5711.740, 12.9217, 11.1941,  3.5402,
     + 5762.450, 12.9351, 11.2041,  3.5472,
     + 5813.160, 12.9474, 11.2134,  3.5537,
     + 5863.870, 12.9586, 11.2219,  3.5596,
     + 5914.590, 12.9688, 11.2295,  3.5650,
     + 5965.300, 12.9779, 11.2364,  3.5698/

      data (z(i),rho(i),vp(i),vs(i),i=131,138) /
     + 6016.010, 12.9859, 11.2424,  3.5740,
     + 6066.720, 12.9929, 11.2477,  3.5777,
     + 6117.440, 12.9988, 11.2521,  3.5808,
     + 6168.150, 13.0036, 11.2557,  3.5833,
     + 6218.860, 13.0074, 11.2586,  3.5867,
     + 6269.570, 13.0100, 11.2606,  3.5875,
     + 6320.290, 13.0117, 11.2618,  3.5878,
     + 6371.000, 13.0122, 11.2622,  3.5878/

      pp = interp(z,vp,nz,1,pz,err)
      ps = interp(z,vs,nz,1,pz,err)
      prho = interp(z,rho,nz,1,pz,err)
      end

      real function interp(xa,ya,n,npts,x,err)
C    Function to interpolate between tabulated values.  The function
C       returns the interpolated result, plus an error.  A number of
C       points to either side of the desired value is given as an argument.
C       This value should be as small as feasible, since large values cause
C       more variation in the interpolated result.
      real xa(n), ya(n), x, value, err

C     Run through tables and bracket value requested.  Interpolate
C        with a more limited number of points.
      if (xa(1) .lt. xa(n)) then
	 ilo = 1
	 ihi = n
      else
	 ilo = n
	 ihi = 1
      endif
10    continue
	 i = (ihi + ilo)/2
	 if (x .eq. xa(i)) then
	    interp = ya(i)
	    err = 0.0
	    return
	 endif
	 if (x .lt. xa(i)) then
	    ihi = i
	 else
	    ilo = i
	 endif
      if (abs(ihi - ilo) .gt. 1) go to 10
      if (ihi .lt. ilo) then
	 i = ihi
	 ihi = ilo
	 ilo = i
      endif

C     Have desired value bracketed.  Adjust bounds and interpolate.
      j = max(1,ilo-npts+1)
      k = min(n,ihi+npts-1)
      if (k-j+1 .ne. 2*npts) then
	 if (j .eq. 1) then
	    k=min(j+2*npts-1,n)
	 else
	    j=max(1,k-2*npts+1)
	 endif
      endif
      call polint(xa(j),ya(j),k-j+1,x,value,err)
      interp = value
      return
      end

      SUBROUTINE POLINT(XA,YA,N,X,Y,DY)
      PARAMETER (NMAX=25) 
      DIMENSION XA(N),YA(N),C(NMAX),D(NMAX)
      IF (N .GT. NMAX) STOP '**POLINT:  TOO MUCH DATA.'
      NS=1
      DIF=ABS(X-XA(1))
      DO 11 I=1,N 
        DIFT=ABS(X-XA(I))
        IF (DIFT.LT.DIF) THEN
          NS=I
          DIF=DIFT
        ENDIF
        C(I)=YA(I)
        D(I)=YA(I)
11    CONTINUE
      Y=YA(NS)
      NS=NS-1
      DO 13 M=1,N-1
        DO 12 I=1,N-M
          HO=XA(I)-X
          HP=XA(I+M)-X
          W=C(I+1)-D(I)
          DEN=HO-HP
          IF(DEN.EQ.0.)STOP '**POLINT:  IMPOSSIBLE!'
          DEN=W/DEN
          D(I)=HP*DEN
          C(I)=HO*DEN
12      CONTINUE
        IF (2*NS.LT.N-M)THEN
          DY=C(NS+1)
        ELSE
          DY=D(NS)
          NS=NS-1
        ENDIF
        Y=Y+DY
13    CONTINUE
      RETURN
      END
